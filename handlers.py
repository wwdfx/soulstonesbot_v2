import random
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import cur, conn, reconnect_db
from utils import generate_missions, get_balance, update_balance, reduce_balance, get_user_rank, get_user_symbols, can_request_reading

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        message_text = update.message.text
        target_group_id = -1002142915618  # Adjust this ID to your target group

        if len(message_text) >= 500 and update.message.chat_id == target_group_id:
            user_id = update.message.from_user.id
            user_mention = update.message.from_user.username or update.message.from_user.first_name
            mention_text = f"@{user_mention}" if update.message.from_user.username else user_mention

            cur.execute('INSERT INTO user_symbols (user_id, symbols_count) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET symbols_count = user_symbols.symbols_count + %s', (user_id, len(message_text), len(message_text)))
            conn.commit()

            user_rank, soulstones = await get_user_rank(user_id)
            new_balance = await update_balance(user_id, soulstones)
            await update.message.reply_text(f"üíé {mention_text}, –≤–∞—à –ø–æ—Å—Ç –∑–∞—á—Ç—ë–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{soulstones} –∫ –∫–∞–º–Ω—è–º –¥—É—à. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}üíé.")

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_mention = update.message.from_user.username or update.message.from_user.first_name
    mention_text = f"@{user_mention}" if update.message.from_user.username else user_mention
    user_rank, _ = await get_user_rank(user_id)
    user_balance = await get_balance(user_id)
    total_symbols = await get_user_symbols(user_id)

    profile_text = (f"–ü—Ä–æ—Ñ–∏–ª—å {mention_text}:\n"
                    f"–†–∞–Ω–∫: {user_rank}.\n"
                    f"–ë–∞–ª–∞–Ω—Å –ö–∞–º–Ω–µ–π –¥—É—à: {user_balance}.\n"
                    f"–°–∏–º–≤–æ–ª–æ–≤ –≤ —Ä–ø-—á–∞—Ç–µ: {total_symbols}.")

    buttons = [
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ú–∞–≥–Ω—É—Å–∞", callback_data="reading")],
        [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data="checkin")],
        [InlineKeyboardButton("–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data="rockpaperscissors")],
        [InlineKeyboardButton("–ú–∏—Å—Å–∏–∏", callback_data="missions")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(profile_text, reply_markup=keyboard)

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_mention = query.from_user.username or query.from_user.first_name
    mention_text = f"@{user_mention}" if query.from_user.username else user_mention
    balance = await get_balance(user_id)
    await query.edit_message_text(f"üíé {mention_text}, –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}üíé.")

@reconnect_db
async def checkin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    today = datetime.now()
    cur.execute('SELECT streak, last_checkin FROM checkin_streak WHERE user_id = %s', (user_id,))
    result = cur.fetchone()

    if result:
        streak, last_checkin = result['streak'], result['last_checkin']

        if today.date() == last_checkin.date():
            await query.edit_message_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–≤—Ç—Ä–∞.")
            return

        if today - last_checkin > timedelta(days=1):
            streak = 1
            reward = 25
            image_path = './img/lossStreak.png'
            await query.message.reply_photo(photo=open(image_path, 'rb'), caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —á–µ—Ä–µ–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ 25 –ö–∞–º–Ω–µ–π –¥—É—à.")
        else:
            streak += 1
            if streak > 7:
                streak = 7
            reward = 25 * streak
            image_path = f'./img/check{streak}.png'
            await query.message.reply_photo(photo=open(image_path, 'rb'), caption=f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward} –ö–∞–º–Ω–µ–π –¥—É—à!")
    else:
        streak = 1
        reward = 25
        image_path = './img/check1.png'
        await query.message.reply_photo(photo=open(image_path, 'rb'), caption=f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥ 1 –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ 25 –ö–∞–º–Ω–µ–π –¥—É—à!")

    cur.execute('INSERT INTO checkin_streak (user_id, streak, last_checkin) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET streak = %s, last_checkin = %s', (user_id, streak, today, streak, today))
    conn.commit()
    new_balance = await update_balance(user_id, reward)
    user_mention = query.from_user.username or query.from_user.first_name
    mention_text = f"@{user_mention}" if query.from_user.username else user_mention
    await query.edit_message_text(f"üíé {mention_text}, –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}üíé.")

readings = [
    "–°–µ–≥–æ–¥–Ω—è –∞–Ω–≥–µ–ª—å—Å–∫–∞—è —Å–∏–ª–∞ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±—è.",
    "–ù–æ–≤–∞—è —Ä—É–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç —Ç–µ–±–µ —Å–≤–æ—é –∏—Å—Ç–∏–Ω–Ω—É—é —Ü–µ–ª—å.",
    "–û—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è –¥–µ–º–æ–Ω–æ–≤, –ø—Ä—è—á—É—â–∏—Ö—Å—è –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.",
    "–°–æ—é–∑–Ω–∏–∫ –∏–∑ –ù–∏–∂–Ω–µ–≥–æ –º–∏—Ä–∞ –æ–∫–∞–∂–µ—Ç –≤–∞–∂–Ω—É—é –ø–æ–º–æ—â—å.",
    "–¢–≤–æ–π —Å–µ—Ä—Ñ–∏–º—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è —Å–∏—è—Ç—å —è—Ä—á–µ –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.",
    "–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç —Å–µ–∫—Ä–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–π –ø—É—Ç—å.",
    "–°–≤—è–∑—å –ø–∞—Ä–∞–±–∞—Ç–∞–π —É–∫—Ä–µ–ø–∏—Ç —Ç–≤–æ—é —Ä–µ—à–∏–º–æ—Å—Ç—å.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ò–¥—Ä–∏—Å–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.",
    "–ú—É–¥—Ä–æ—Å—Ç—å –ë–µ–∑–º–æ–ª–≤–Ω—ã—Ö –±—Ä–∞—Ç—å–µ–≤ –ø–æ–º–æ–∂–µ—Ç –≤ —Ç–≤–æ–µ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏.",
    "–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –°—É–º–µ—Ä–µ—á–Ω–æ–≥–æ –æ—Ö–æ—Ç–Ω–∏–∫–∞.",
    "–†–µ—à–µ–Ω–∏–µ –ö–æ–Ω–∫–ª–∞–≤–∞ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ.",
    "–ú–∞–≥ –æ—Ç–∫—Ä–æ–µ—Ç —Ç–µ–±–µ –ø–æ—Ä—Ç–∞–ª –≤ –∑–Ω–∞—á–∏–º–æ–µ –º–µ—Å—Ç–æ.",
    "–¢–≤–æ–π —Å—Ç–µ–ª–µ —Å–æ–∑–¥–∞—Å—Ç —Ä—É–Ω—É –æ–≥—Ä–æ–º–Ω–æ–π —Å–∏–ª—ã.",
    "–î—Ä–µ–≤–Ω—è—è –∫–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –æ—Ç–∫—Ä–æ–µ—Ç –∑–∞–±—ã—Ç–æ–µ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–∫–ª—è—Ç–∏–µ.",
    "–ó–∞–≥–∞–¥–∫–∞ —Ñ–µ–π—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫ —Å–∫—Ä—ã—Ç–æ–π –∏—Å—Ç–∏–Ω–µ.",
    "–¢–≤–æ—è —Å–≤—è–∑—å —Å –∞–Ω–≥–µ–ª—å—Å–∫–∏–º –º–∏—Ä–æ–º —Å—Ç–∞–Ω–µ—Ç —Å–∏–ª—å–Ω–µ–µ.",
    "–õ–æ—è–ª—å–Ω–æ—Å—Ç—å –≤–∞–º–ø–∏—Ä–∞ –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–æ—Ü–µ–Ω–∏–º–æ–π.",
    "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∫–æ–ª–¥—É–Ω–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç —è—Å–Ω–æ—Å—Ç—å –≤ –∑–∞–ø—É—Ç–∞–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
    "–î–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –º–∏—Ä—ã –Ω–µ–æ–±—ã—á–∞–π–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã; –±—É–¥—å –Ω–∞ —á–µ–∫—É.",
    "–°–æ–Ω –¥–∞—Å—Ç —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –±—É–¥—É—â–µ–º.",
    "–°–∫—Ä—ã—Ç–∞—è —Ä—É–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.",
    "–ò—â–∏ –æ—Ç–≤–µ—Ç—ã –≤ –ö–æ–¥–µ–∫—Å–µ. –û–Ω –∑–Ω–∞–µ—Ç —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å",
    "–°–º–µ—Ä—Ç–Ω—ã–π —É–¥–∏–≤–∏—Ç —Ç–µ–±—è —Å–≤–æ–µ–π —Ö—Ä–∞–±—Ä–æ—Å—Ç—å—é.",
    "–ü–æ—Ç–µ—Ä—è–Ω–Ω–∞—è —Å–µ–º–µ–π–Ω–∞—è —Ä–µ–ª–∏–∫–≤–∏—è –æ–±—Ä–µ—Ç–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
    "–¢–µ–Ω–µ–≤–æ–π —Ä—ã–Ω–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–º–µ—Ç, –≤–∞–∂–Ω—ã–π –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
    "–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –º—è—Ç–µ–∂–Ω—ã–º –°—É–º–µ—Ä–µ—á–Ω—ã–º –æ—Ö–æ—Ç–Ω–∏–∫–æ–º –Ω–µ–∏–∑–±–µ–∂–Ω–æ.",
    "–¶–µ—Ä–µ–º–æ–Ω–∏—è —Ä—É–Ω –ø—Ä–∏–±–ª–∏–∑–∏—Ç —Ç–µ–±—è –∫ —Ç–≤–æ–µ–º—É –∏—Å—Ç–∏–Ω–Ω–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É.",
    "–ü–æ—Å–µ—â–µ–Ω–∏–µ –ó–∞–ª–∞ –°–æ–≥–ª–∞—Å–∏—è –æ—á–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.",
    "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–æ—é–∑ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å –æ–±–∏—Ç–∞—Ç–µ–ª–µ–º –ù–∏–∂–Ω–µ–≥–æ –º–∏—Ä–∞.",
    "–¢–≤–æ–π —Å–µ—Ä—Ñ–∏–º—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫ –ø–æ–º–æ–∂–µ—Ç —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Å–∫—Ä—ã—Ç–æ–≥–æ –¥–µ–º–æ–Ω–∞.",
    "–ó–∞–ø—Ä–µ—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–∫—É—à–∞—Ç—å —Ç–µ–±—è –≤–µ–ª–∏–∫–æ–π —Å–∏–ª–æ–π.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–ª–∞–≥–æ–≥–æ –î–≤–æ—Ä–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.",
    "–ü—Ä–∏–∑—Ä–∞–∫ –ø—Ä–æ—à–ª–æ–≥–æ –°—É–º–µ—Ä–µ—á–Ω–æ–≥–æ –æ—Ö–æ—Ç–Ω–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –º—É–¥—Ä–æ—Å—Ç—å.",
    "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É—Å–∏–ª–∏—Ç —Ç–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.",
    "–¢–≤–æ—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –ö–æ–Ω–∫–ª–∞–≤—É –±—É–¥–µ—Ç –∏—Å–ø—ã—Ç–∞–Ω–∞.",
    "–ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –∏–∑ –ú–æ–ª—á–∞–ª–∏–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞ –≤—ã–π–¥–µ—Ç –Ω–∞ —Å–≤–µ—Ç.",
    "–†–µ–¥–∫–∏–π –¥–µ–º–æ–Ω –ø–æ—Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ–µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.",
    "–°—Ç–∞—Ä—ã–π –¥—Ä—É–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è —Å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏.",
    "–í–∏–¥–µ–Ω–∏–µ –æ—Ç –∞–Ω–≥–µ–ª–∞ –†–∞–∑–∏—ç–ª—è –Ω–∞–ø—Ä–∞–≤–∏—Ç —Ç–≤–æ–π –ø—É—Ç—å.",
    "–°–∏–ª–∞ –°–º–µ—Ä—Ç–Ω–æ–π –ß–∞—à–∏ –±—É–¥–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è.",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ì–æ—Ä–æ–¥ –ö–æ—Å—Ç–µ–π —Ä–∞—Å–∫—Ä–æ–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∑–Ω–∞–Ω–∏—è.",
    "–ó–≤—É–∫ —Ä–æ–≥–∞ –°—É–º–µ—Ä–µ—á–Ω—ã—Ö –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.",
    "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä—É–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–∏—Ö —Å–Ω–∞—Ö.",
    "–í—Å—Ç—Ä–µ—á–∞ —Å –î–≤–æ—Ä–æ–º –°—É–º–µ—Ä–µ–∫ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é —Å—É–¥—å–±—É.",
    "–¢–∞–π–Ω–∞ –ò–Ω–∫–≤–∏–∑–∏—Ç–æ—Ä–∞ –±—É–¥–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∞.",
    "–°–∫—Ä—ã—Ç—ã–π –≤—Ö–æ–¥ –≤ –ò–Ω—Å—Ç–∏—Ç—É—Ç –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –Ω–æ–≤–æ–º—É –æ—Ç–∫—Ä—ã—Ç–∏—é.",
    "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –º–∞–≥–∞ —É–¥–∏–≤–∏—Ç —Ç–µ–±—è.",
    "–¢–∞–π–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç —Ñ–µ–π—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –Ω–∞—Ö–æ–¥–∫–µ.",
    "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ —Ä–∞—Å–∫—Ä–æ–µ—Ç –¥—Ä–µ–≤–Ω—é—é —Ä–µ–ª–∏–∫–≤–∏—é."
]

async def reading_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if not await can_request_reading(user_id):
        await query.edit_message_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–≤—Ç—Ä–∞.")
        return

    reading = random.choice(readings)
    await query.edit_message_text(f"üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ú–∞–≥–Ω—É—Å–∞: {reading}")

async def rockpaperscissors_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    buttons = [
        [InlineKeyboardButton("–ö–∞–º–µ–Ω—å", callback_data="rps_rock")],
        [InlineKeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_scissors")],
        [InlineKeyboardButton("–ë—É–º–∞–≥–∞", callback_data="rps_paper")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É:", reply_markup=keyboard)

async def rps_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_choice = query.data.split('_')[1]
    choices = ['rock', 'scissors', 'paper']
    bot_choice = random.choice(choices)
    outcome = ""

    if user_choice == bot_choice:
        outcome = "–ù–∏—á—å—è! –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –ö–∞–º–Ω–∏ –¥—É—à."
    elif (user_choice == "rock" and bot_choice == "scissors") or \
         (user_choice == "scissors" and bot_choice == "paper") or \
         (user_choice == "paper" and bot_choice == "rock"):
        outcome = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 25 –ö–∞–º–Ω–µ–π –¥—É—à."
        await update_balance(query.from_user.id, 25)
    else:
        outcome = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 25 –ö–∞–º–Ω–µ–π –¥—É—à."
        await reduce_balance(query.from_user.id, 25)

    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_choice}, –±–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice}. {outcome}")

@reconnect_db
async def missions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    today = datetime.now().date()

    cur.execute('SELECT attempts FROM mission_attempts WHERE user_id = %s AND date = %s', (user_id, today))
    result = cur.fetchone()
    attempts = result['attempts'] if result else 0

    if attempts >= 3:
        await update.callback_query.edit_message_text("‚ú® –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 3 –æ—Ç—Ä—è–¥–∞ –Ω–∞ –º–∏—Å—Å–∏–∏ —Å–µ–≥–æ–¥–Ω—è. ‚åõÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–≤—Ç—Ä–∞.")
        return

    missions = await generate_missions()
    buttons = [
        InlineKeyboardButton(
            f"{mission['name']} ({mission['reward']} üíé –∫–∞–º–Ω–µ–π –¥—É—à)",
            callback_data=f"mission_{mission['id']}"
        )
        for mission in missions
    ]
    keyboard = InlineKeyboardMarkup.from_column(buttons)
    await update.callback_query.edit_message_text("‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—Ä—è–¥–∞:", reply_markup=keyboard)

@reconnect_db
async def mission_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    mission_id = int(query.data.split('_')[1])

    cur.execute('SELECT * FROM missions WHERE id = %s', (mission_id,))
    mission = cur.fetchone()

    if not mission:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    today = datetime.now().date()
    cur.execute('SELECT attempts FROM mission_attempts WHERE user_id = %s AND date = %s', (user_id, today))
    result = cur.fetchone()
    attempts = result['attempts'] if result else 0

    if attempts >= 3:
        await query.edit_message_text("‚ú® –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 3 –æ—Ç—Ä—è–¥–∞ –Ω–∞ –º–∏—Å—Å–∏–∏ —Å–µ–≥–æ–¥–Ω—è. ‚åõÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–≤—Ç—Ä–∞.")
        return

    if result:
        cur.execute('UPDATE mission_attempts SET attempts = attempts + 1 WHERE user_id = %s AND date = %s', (user_id, today))
    else:
        cur.execute('INSERT INTO mission_attempts (user_id, date, attempts) VALUES (%s, %s, 1)', (user_id, today))
    conn.commit()

    start_time = datetime.now()
    end_time = start_time + timedelta(hours=mission['length'])
    cur.execute('INSERT INTO user_missions (user_id, mission_id, start_time, end_time) VALUES (%s, %s, %s, %s)', (user_id, mission_id, start_time, end_time))
    conn.commit()

    await query.edit_message_text(f"üíº –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—Ä—è–¥ –Ω–∞ –º–∏—Å—Å–∏—é: ‚ú®{mission['name']}‚ú®. üåí –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ‚åõÔ∏è {end_time.strftime('%Y-%m-%d %H:%M:%S')} ‚åõÔ∏è.")